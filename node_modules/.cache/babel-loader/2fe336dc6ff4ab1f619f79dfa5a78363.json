{"ast":null,"code":"import { authHeader } from '../_helpers';\nconst API_URL = \"http://localhost:8080/api/test/\";\nexport const userService = {\n  login,\n  logout\n};\n\nfunction login(username, password) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  };\n  return fetch(API_URL + `/users/authenticate`, requestOptions).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout(); //location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["E:/wamp64/www/cryptolisting/frontend/src/_services/user.service.js"],"names":["authHeader","API_URL","userService","login","logout","username","password","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","user","localStorage","setItem","removeItem","response","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;AAEA,MAAMC,OAAO,GAAG,iCAAhB;AAEA,OAAO,MAAMC,WAAW,GAAG;AAC1BC,EAAAA,KAD0B;AAE1BC,EAAAA;AAF0B,CAApB;;AAKP,SAASD,KAAT,CAAeE,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,QAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAf;AAHa,GAAvB;AAMA,SAAOO,KAAK,CAACZ,OAAO,GAAI,qBAAZ,EAAkCM,cAAlC,CAAL,CACFO,IADE,CACGC,cADH,EAEFD,IAFE,CAEGE,IAAI,IAAI;AACV;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BP,IAAI,CAACC,SAAL,CAAeI,IAAf,CAA7B;AAEA,WAAOA,IAAP;AACH,GAPE,CAAP;AAQH;;AAED,SAASZ,MAAT,GAAkB;AACd;AACAa,EAAAA,YAAY,CAACE,UAAb,CAAwB,MAAxB;AACH;;AAED,SAASJ,cAAT,CAAwBK,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBP,IAAhB,CAAqBO,IAAI,IAAI;AAChC,UAAMC,IAAI,GAAGD,IAAI,IAAIV,IAAI,CAACY,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACd,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzB;AACArB,QAAAA,MAAM,GAFmB,CAGzB;AACH;;AAED,YAAMsB,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACK,OAAd,IAA0BP,QAAQ,CAACQ,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAOJ,IAAP;AACH,GAdM,CAAP;AAeH","sourcesContent":["import { authHeader } from '../_helpers';\r\n\r\nconst API_URL = \"http://localhost:8080/api/test/\";\r\n\r\nexport const userService = {\r\n\tlogin,\r\n\tlogout,\r\n};\r\n\r\nfunction login(username, password) {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ username, password })\r\n    };\r\n\r\n    return fetch(API_URL + `/users/authenticate`, requestOptions)\r\n        .then(handleResponse)\r\n        .then(user => {\r\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n\r\n            return user;\r\n        });\r\n}\r\n\r\nfunction logout() {\r\n    // remove user from local storage to log user out\r\n    localStorage.removeItem('user');\r\n}\r\n\r\nfunction handleResponse(response) {\r\n    return response.text().then(text => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                logout();\r\n                //location.reload(true);\r\n            }\r\n\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        return data;\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}